# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2023, √âlie Michel and contributors
# This file is distributed under the same license as the Learn WebGPU for
# C++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Learn WebGPU for C++ \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-25 09:12+0200\n"
"PO-Revision-Date: 2023-10-25 09:12+0200\n"
"Last-Translator: √âlie Michel <elie.michel@exppad.com>\n"
"Language: fr\n"
"Language-Team: fr <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../introduction.md:1
msgid "Introduction"
msgstr ""

#: ../../introduction.md:4
msgid "What is a graphics API?"
msgstr "Qu'est-ce qu'une API graphique ?"

#: ../../introduction.md:7
msgid ""
"A personal computer or smartphone commonly contains two computing units: "
"the **CPU** (for *Central Processing Unit*) and the **GPU** (*Graphics "
"Processing Unit*). When programming an application, **one primarily "
"writes instructions for the CPU**. This is what most of programming "
"languages are for."
msgstr ""
"Un ordinateur ou un smartphone contiens typiquement deux unit√©s de calcul: "
"le processeur, ou **CPU** (pour *Central Processing Unit*), et la carte graphique, ou **GPU** (*Graphics "
"Processing Unit*). Lorsque l'on programme une application, **on √©crit principalement des instructions pour le CPU.** "
"C'est ce √† quoi sont d√©di√©s la plupart des langagues de programmation en tous cas."

#: ../../introduction.md:11
msgid ""
"The CPU and GPU are two different processors. We program the CPU so that "
"it instructs the GPU what to do through the graphics API and the driver."
msgstr ""

#: ../../introduction.md:14
msgid ""
"If one wants the application to execute instructions on the GPU (e.g., to"
" render 3D images), the CPU code must **send instructions to the driver**"
" of the GPU. A graphics API is a programming interface used by the CPU "
"code to dialog with the GPU."
msgstr ""

#: ../../introduction.md:16
msgid ""
"There exists many such APIs, for instance you may have heard of OpenGL, "
"DirectX, Vulkan or Metal."
msgstr ""

#: ../../introduction.md:19
msgid ""
"In theory anyone can invent their own graphics API. Each GPU vendor has "
"its own low-level protocol for their driver to dialog with the hardware, "
"on top of which the more common APIs are implemented (often provided with"
" the driver)."
msgstr ""

#: ../../introduction.md:22
msgid ""
"In this documentation, we learn a graphics API called "
"[WebGPU](https://www.w3.org/TR/webgpu/). This API has been designed to "
"provided a **unified access** to GPUs whichever the GPU vendor and "
"operating system the application runs with."
msgstr ""

#: ../../introduction.md:27
msgid ""
"WebGPU is a *Render Hardware Interface* built on top of the various APIs "
"provided by the driver/OS depending on your platform. This duplicated "
"development effort is made once by the web browsers and made available to"
" us through the `webgpu.h` header they provide."
msgstr ""

#: ../../introduction.md:36
msgid "Why WebGPU?"
msgstr ""

#: ../../introduction.md:39
msgid ""
"ü§î Yeah, why in the world would I use a **web API** to develop a **desktop"
" application**?"
msgstr ""

#: ../../introduction.md:41
msgid "Glad you asked, the short answer is:"
msgstr ""

#: ../../introduction.md:43
msgid "Reasonable level of abstraction"
msgstr ""

#: ../../introduction.md:44
msgid "Good performance"
msgstr ""

#: ../../introduction.md:45
msgid "Cross-platform"
msgstr ""

#: ../../introduction.md:46
msgid "Standard enough"
msgstr ""

#: ../../introduction.md:47
msgid "Future-proof"
msgstr ""

#: ../../introduction.md:49
msgid ""
"And it is actually the **only** graphics API that benefits from all of "
"these properties!"
msgstr ""

#: ../../introduction.md:51
msgid ""
"Yes, the WebGPU API has been **designed primarily for the web**, as an "
"interface between JavaScript and GPUs. This is **not a drawback**, since "
"as of today the requirements in terms of performance for web pages is "
"actually the same as for native application. You can read more about [why"
" I believe that WebGPU is the best graphics API to learn in "
"2023](appendices/teaching-native-graphics-in-2023.md)."
msgstr ""

#: ../../introduction.md:54
msgid ""
"When designing an API for the Web, the two key constraints are "
"**portability** and **privacy**. We **benefit** here from the effort "
"developed for portability, and fortunately the limitations of the API due"
" to privacy considerations can be **disabled** when using WebGPU as a "
"native API."
msgstr ""

#: ../../introduction.md:57
msgid "Why C++ then?"
msgstr ""

#: ../../introduction.md:60
msgid ""
"Shouldn't we use **JavaScript** since it is the initial target of WebGPU?"
" Or **C** because it is the language of the `webgpu.h` header we'll be "
"using? Or **Rust** since this is the language in which one of the WebGPU "
"backend is written? All of these are valid languages to use WebGPU with, "
"but I chose C++ because:"
msgstr ""

#: ../../introduction.md:62
msgid ""
"C++ is still the primary language used for high performance graphics "
"application (video games, render engines, modeling tools, etc.)."
msgstr ""

#: ../../introduction.md:63
msgid ""
"The level of abstraction and control of C++ is well suited for "
"interacting with graphics APIs in general."
msgstr ""

#: ../../introduction.md:64
msgid ""
"Graphics programming is a very good occasion to really learn C++. I will "
"only assume a very shallow knowledge of this language in the beginning."
msgstr ""

#: ../../introduction.md:67
msgid ""
"For an equivalent of this documentation for Rust, I recommend you to have"
" a look at Sotrh's [Learn WGPU](https://sotrh.github.io/learn-wgpu)."
msgstr ""

#: ../../introduction.md:70
msgid "How to use this documentation?"
msgstr ""

#: ../../introduction.md:73
msgid "Reading"
msgstr ""

#: ../../introduction.md:75
msgid ""
"The first two parts of this documentation have been designed to be read "
"sequentially, as a full lecture, but its different pages can also be used"
" as reminders on specific topics."
msgstr ""

#: ../../introduction.md:77
msgid ""
"The [Getting Started](getting-started/index.md) part deals with the "
"boilerplate needed to initialize WebGPU and the window management (using "
"GLFW), and introduces key concepts and idioms of the API. In this "
"section, we manipulate the raw C API, and finish by introducing the C++ "
"wrapper that we use in the rest of this documentation."
msgstr ""

#: ../../introduction.md:79
msgid ""
"It is possible to **go straight to part 2** on [Basic 3D Rendering"
"](basic-3d-rendering/index.md) and use the boilerplate code resulting "
"from part 1 as a starter kit. You can always come back later to the "
"details of the getting started part later on."
msgstr ""

#: ../../introduction.md:81
msgid ""
"Rendering is far from being the only use of GPUs nowadays; part 3 "
"introduces [Basic Compute](basic-compute/index.md), i.e., non-rendering "
"use of WebGPU."
msgstr ""

#: ../../introduction.md:83
msgid ""
"The fourth part [Advanced Techniques](advanced-techniques/index.md) is "
"made of focus points on various computer graphics techniques, which can "
"be read more independently on each others."
msgstr ""

#: ../../introduction.md:85
msgid "Literate Programming"
msgstr ""

#: ../../introduction.md:88
msgid ""
"This guide is in an early phase; it is only available for the first few "
"chapters."
msgstr ""

#: ../../introduction.md:91
msgid ""
"This guide follows the principle of **Literate Programming**: the "
"documentation you read is annotated such that one can **automatically "
"combine its code blocks** into a fully working code. This is a way to "
"ensure that the guide truly contains everything you need to **reproduce "
"the results**."
msgstr ""

#: ../../introduction.md:93
msgid ""
"On the right-hand sidebar of the chapters that support it, you can "
"enable/disable the display of these information:"
msgstr ""

#: ../../introduction.md:105
msgid ""
"Everything is turned off by default to avoid visual clutter, but if you "
"feel you don't know where exactly to include in particular code snippet, "
"you can turn them on."
msgstr ""

#: ../../introduction.md:107
msgid "Contributing"
msgstr ""

#: ../../introduction.md:109
msgid ""
"If you encounter any typo or more important issue, feel free of fixing it"
" by clicking the edit button present on top of each page!"
msgstr ""

#: ../../introduction.md:111 ../../introduction.md:116
msgid "Use the edit button present on top of each page!"
msgstr ""

#: ../../introduction.md:121
msgid ""
"More generally, you can discuss any technical or organizational choice "
"through [the repo's "
"issues](https://github.com/eliemichel/LearnWebGPU/issues). Any "
"constructive and/or benevolent feedback is welcome!"
msgstr ""

#: ../../introduction.md:123
msgid "Work In Progress"
msgstr ""

#: ../../introduction.md:125
msgid ""
"This guide is still under construction, and the WebGPU API itself is as "
"well. I am trying to follow as tightly as I can the changes, but until "
"the API gets stable this inherently leads to slight inconsistencies."
msgstr ""

#: ../../introduction.md:127
msgid ""
"Always pay attention to the date of last modification of a page and of "
"the accompanying code (using "
"[git](https://github.com/eliemichel/LearnWebGPU)). They may not be "
"perfectly in sync; usually I first update the code, then the content of "
"the guide."
msgstr ""

